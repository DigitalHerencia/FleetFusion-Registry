{
  "name": "use-toast",
  "type": "registry:hook",
  "title": "useToast Hook",
  "description": "Hook to trigger toast notifications for fleet management actions",
  "dependencies": [
    "sonner"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/fleetfusion-dark/hooks/use-toast.ts",
      "type": "registry:hook",
      "content": "import { toast } from \"sonner\"\n\ntype ToastProps = {\n  title?: string\n  description?: string\n  action?: {\n    label: string\n    onClick: () => void\n  }\n}\n\n/**\n * useToast hook provides convenient toast notification methods for fleet management actions.\n * Wraps the Sonner toast API to fit FleetFusion usage patterns.\n */\nexport function useToast() {\n  return {\n    /** Show a generic info toast */\n    toast: (message: string, options?: ToastProps) => {\n      return toast(message, {\n        description: options?.description,\n        action: options?.action,\n      })\n    },\n    \n    /** Show a success-style toast (green check icon, etc.) */\n    success: (message: string, options?: ToastProps) => {\n      return toast.success(message, {\n        description: options?.description,\n        action: options?.action,\n      })\n    },\n    \n    /** Show an error-style toast (red error icon, etc.) */\n    error: (message: string, options?: ToastProps) => {\n      return toast.error(message, {\n        description: options?.description,\n        action: options?.action,\n      })\n    },\n    \n    /** Show a warning-style toast (yellow warning icon, etc.) */\n    warning: (message: string, options?: ToastProps) => {\n      return toast.warning(message, {\n        description: options?.description,\n        action: options?.action,\n      })\n    },\n    \n    /** Show an info-style toast (blue info icon, etc.) */\n    info: (message: string, options?: ToastProps) => {\n      return toast.info(message, {\n        description: options?.description,\n        action: options?.action,\n      })\n    },\n    \n    /** Show a loading toast that can be updated */\n    loading: (message: string, options?: ToastProps) => {\n      return toast.loading(message, {\n        description: options?.description,\n      })\n    },\n    \n    /** Dismiss a specific toast */\n    dismiss: (toastId?: string | number) => {\n      return toast.dismiss(toastId)\n    },\n    \n    /** Fleet-specific toast methods */\n    fleet: {\n      /** Driver-related success notification */\n      driverSuccess: (message: string) => {\n        return toast.success(message, {\n          description: \"Driver operation completed successfully\",\n        })\n      },\n      \n      /** Vehicle-related success notification */\n      vehicleSuccess: (message: string) => {\n        return toast.success(message, {\n          description: \"Vehicle operation completed successfully\",\n        })\n      },\n      \n      /** Dispatch-related success notification */\n      dispatchSuccess: (message: string) => {\n        return toast.success(message, {\n          description: \"Dispatch operation completed successfully\",\n        })\n      },\n      \n      /** Compliance-related warning */\n      complianceWarning: (message: string) => {\n        return toast.warning(message, {\n          description: \"Please review compliance requirements\",\n        })\n      },\n      \n      /** Maintenance-related info */\n      maintenanceInfo: (message: string) => {\n        return toast.info(message, {\n          description: \"Vehicle maintenance notification\",\n        })\n      },\n    },\n  }\n}\n\nexport type { ToastProps }"
    }
  ]
}