{
  "name": "badge",
  "type": "registry:ui",
  "title": "Badge",
  "description": "A badge component for displaying status indicators and labels",
  "dependencies": [
    "class-variance-authority"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "registry/fleetfusion-dark/ui/badge.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/registry/fleetfusion-dark/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n        // Fleet-specific status variants\n        success:\n          \"border-transparent bg-fleet-success text-white hover:bg-fleet-success/80\",\n        warning:\n          \"border-transparent bg-fleet-warning text-black hover:bg-fleet-warning/80\",\n        danger:\n          \"border-transparent bg-fleet-danger text-white hover:bg-fleet-danger/80\",\n        info:\n          \"border-transparent bg-fleet-info text-white hover:bg-fleet-info/80\",\n        neutral:\n          \"border-transparent bg-fleet-neutral text-white hover:bg-fleet-neutral/80\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }"
    }
  ]
}