{
  "name": "driver-card",
  "type": "registry:component",
  "title": "Driver Card",
  "description": "Display a driver's information card with photo and details",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "avatar",
    "card",
    "badge"
  ],
  "files": [
    {
      "path": "registry/fleetfusion-dark/business/drivers/driver-card.tsx",
      "type": "registry:component",
      "content": "import { Avatar, AvatarImage, AvatarFallback } from \"@/registry/fleetfusion-dark/ui/avatar\"\nimport { Badge } from \"@/registry/fleetfusion-dark/ui/badge\"\nimport { Card, CardContent, CardHeader } from \"@/registry/fleetfusion-dark/ui/card\"\nimport { Shield, Phone, MapPin } from \"lucide-react\"\nimport { cn, getInitials } from \"@/registry/fleetfusion-dark/lib/utils\"\n\ninterface Driver {\n  id: string\n  name: string\n  position: string\n  license: string\n  status: \"active\" | \"inactive\" | \"suspended\"\n  phone?: string\n  location?: string\n  photoUrl?: string\n  lastActivity?: string\n  hoursWorked?: number\n  hoursRemaining?: number\n}\n\ninterface DriverCardProps {\n  driver: Driver\n  className?: string\n  onClick?: () => void\n}\n\nexport function DriverCard({ driver, className, onClick }: DriverCardProps) {\n  const getStatusVariant = (status: Driver[\"status\"]) => {\n    switch (status) {\n      case \"active\":\n        return \"success\"\n      case \"inactive\":\n        return \"neutral\"\n      case \"suspended\":\n        return \"danger\"\n      default:\n        return \"neutral\"\n    }\n  }\n\n  const getStatusLabel = (status: Driver[\"status\"]) => {\n    switch (status) {\n      case \"active\":\n        return \"Active\"\n      case \"inactive\":\n        return \"Inactive\"\n      case \"suspended\":\n        return \"Suspended\"\n      default:\n        return \"Unknown\"\n    }\n  }\n\n  return (\n    <Card \n      className={cn(\n        \"transition-all duration-200 hover:shadow-md\",\n        onClick && \"cursor-pointer hover:ring-2 hover:ring-ring hover:ring-offset-2\",\n        className\n      )}\n      onClick={onClick}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"h-12 w-12\">\n              <AvatarImage src={driver.photoUrl} alt={driver.name} />\n              <AvatarFallback className=\"bg-primary/10 text-primary\">\n                {getInitials(driver.name)}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex flex-col\">\n              <h3 className=\"font-semibold text-lg leading-none\">{driver.name}</h3>\n              <p className=\"text-sm text-muted-foreground mt-1\">{driver.position}</p>\n            </div>\n          </div>\n          <Badge variant={getStatusVariant(driver.status)}>\n            {getStatusLabel(driver.status)}\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-3\">\n        {/* License Information */}\n        <div className=\"flex items-center space-x-2 text-sm\">\n          <Shield className=\"h-4 w-4 text-muted-foreground\" />\n          <span className=\"text-muted-foreground\">License:</span>\n          <span className=\"font-medium\">{driver.license}</span>\n        </div>\n        \n        {/* Phone */}\n        {driver.phone && (\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <Phone className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">Phone:</span>\n            <span className=\"font-medium\">{driver.phone}</span>\n          </div>\n        )}\n        \n        {/* Location */}\n        {driver.location && (\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">Location:</span>\n            <span className=\"font-medium\">{driver.location}</span>\n          </div>\n        )}\n        \n        {/* Hours of Service */}\n        {driver.hoursWorked !== undefined && driver.hoursRemaining !== undefined && (\n          <div className=\"border-t pt-3 mt-3\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-sm font-medium\">Hours of Service</span>\n              <span className=\"text-sm text-muted-foreground\">\n                {driver.hoursRemaining}h remaining\n              </span>\n            </div>\n            <div className=\"w-full bg-muted rounded-full h-2\">\n              <div \n                className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                style={{ \n                  width: `${(driver.hoursWorked / (driver.hoursWorked + driver.hoursRemaining)) * 100}%` \n                }}\n              />\n            </div>\n          </div>\n        )}\n        \n        {/* Last Activity */}\n        {driver.lastActivity && (\n          <div className=\"text-xs text-muted-foreground pt-2 border-t\">\n            Last activity: {driver.lastActivity}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nexport type { Driver, DriverCardProps }"
    }
  ]
}